ExSum: In this document I am proposing various techniques that could be implored in order to enhance our current scoring baseline and improve our effectiveness when it comes to identifying and isolating threats. I approach different threats differently in terms of scoring. My idea is to populate dashboards with various types of threats, threat levels, threat priorities, unusual behaviors, and other metrics.

User-based: scoring derived from access to data, type of data, activity, and behaviors.

Step 1 - Normalization: define normalized score of user access across systems, 0 for none and 1 for root.

Step 2 - Analyze sensitivity of applications: multiply user access of sensitive data score to normalized score. UASD (user access to sensitive data) score derived from permissions where user's permissions are divided by guests permissions plus one.
For example:
~let's assume directory /opt/someapplication has permissions of 777 755 000
~let's also assume that directory /opt/anotherapp has permissions of 755 000 000
We can use the differences in the permissions level to assess the relative sensitivity of these applications by virtue of the fact that anotherapp has tighter restriction controls and most therefore be more sensitive; thus, /opt/anotherapp is more sensitive than “someapplication” and that can be scored accordingly. Further, If User 1 has access to ‘someapplication’ but not ‘annotherapp’ while User 2 has access to ‘anotherapp’ but not ‘someapplication’ and all else being equal we would assign a higher risk score to User 2. 

Step 3 - Evaluate User Activity: sum total of “Risk” events calculated from the Event Risk Matrix defining a specific risk and a count (or score) of times those events occurred within X amount of days.

Step 4 – Review and calculate: The essence here is that we want to calculate a Risk score based upon the state of the system as well as the activities of the user over a period of time.

R = n(P/[1+G])*lim ex f(delta(x))  
Administrative users (or users with higher permissions): these users without a doubt need to be watched more closely than your typical user. One way to define admin users is to look at all users with a normalized score above .5. (see step 1 in the User-Based example). We want to know what accesses they have granted and conversely which restrictions have been diminished. In addition, we ought to look at the other side of the fence (so to speak) and see what the recipient user is doing with those new found permissions. A nefarious user may attempt to circumvent security detections by acting in collaboration with another user. This is why it is important that we monitor activity states as well as user states. 

Zero-day Exploit: stochastic monitoring for based upon database of known zero-day exploits. Scoring based upon similarities to the known exploits and is therefore relative to individual exploits.
Our traditional time based evaluation doesn’t help in this case, so it is important to take into account other factors when an insider could easily implement a zero-day attack. Further, the “database” (might already be in practice) is a source containing the list and characteristics of known attacks. For example, See: https://nvd.nist.gov/
Benefits: aggregate by exploits. Show most active exploits vulnerabilities. Monitors for most active threats, and sends alert when potential for threat for given user is approaching upper bounds. 

Combining multiple datasets (e.g. ACAS and HBSS)
Standardize (not normalize) using lambda expressions
SET1(username, message, timestamp)
SET2(userfield, message, date)
SET_UNION(SET1, SET2)
